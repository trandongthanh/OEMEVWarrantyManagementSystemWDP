const { sequelize } = require("../models/index.cjs");

/**
 * SEEDER: T·∫†O XE KH√îNG C√ì CH·ª¶ (Vehicles Without Owner)
 * 
 * M·ª•c ƒë√≠ch: T·∫°o xe ƒë√£ s·∫£n xu·∫•t xong, ƒë√£ l·∫Øp ƒë·ªß components theo chu·∫©n WarrantyComponent
 * c·ªßa model, nh∆∞ng ch∆∞a b√°n cho kh√°ch h√†ng (ownerId = null, purchaseDate = null)
 * 
 * Tr∆∞·ªùng h·ª£p th·ª±c t·∫ø:
 * - Xe trong showroom ch·ªù b√°n
 * - Xe m·ªõi t·ª´ nh√† m√°y v·ªÅ ƒë·∫°i l√Ω
 * - Xe demo/test drive
 * 
 * Quy t·∫Øc:
 * 1. ownerId = null (ch∆∞a c√≥ ch·ªß)
 * 2. purchaseDate = null (ch∆∞a b√°n)
 * 3. dateOfManufacture = c√≥ (ƒë√£ s·∫£n xu·∫•t)
 * 4. Components: status = "INSTALLED" (ƒë√£ l·∫Øp, d√π xe ch∆∞a b√°n)
 * 5. Tu√¢n th·ªß 100% WarrantyComponent c·ªßa model
 */

async function seedVehiclesWithoutOwner() {
  try {
    console.log("üöó B·∫Øt ƒë·∫ßu t·∫°o xe KH√îNG C√ì CH·ª¶ v·ªõi components ƒë√£ l·∫Øp ƒë·∫∑t...\n");

    // ========================================
    // 1. L·∫§Y D·ªÆ LI·ªÜU C∆† B·∫¢N
    // ========================================
    const vehicleCompany = await sequelize.models.VehicleCompany.findOne({
      where: { name: "VinFast Auto" },
    });

    if (!vehicleCompany) {
      throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y VehicleCompany. Ch·∫°y seeder ch√≠nh tr∆∞·ªõc!");
    }

    // L·∫•y t·∫•t c·∫£ vehicle models
    const vehicleModels = await sequelize.models.VehicleModel.findAll({
      where: { vehicleCompanyId: vehicleCompany.vehicleCompanyId },
    });

    if (vehicleModels.length === 0) {
      throw new Error("‚ùå Kh√¥ng t√¨m th·∫•y VehicleModel n√†o!");
    }

    console.log(`‚úÖ T√¨m th·∫•y ${vehicleModels.length} d√≤ng xe\n`);

    // Map models by name ƒë·ªÉ d·ªÖ truy c·∫≠p
    const modelsMap = {};
    for (const model of vehicleModels) {
      modelsMap[model.vehicleModelName] = model;
    }

    // ========================================
    // 2. L·∫§Y WARRANTY COMPONENT CHO T·ª™NG MODEL
    // ========================================
    console.log("üìã Load WarrantyComponent cho t·ª´ng model...");
    
    const warrantyComponentsByModel = {};
    
    for (const model of vehicleModels) {
      const warrantyComps = await sequelize.models.WarrantyComponent.findAll({
        where: { vehicleModelId: model.vehicleModelId },
        include: [
          {
            model: sequelize.models.TypeComponent,
            as: "typeComponent",
            attributes: ["typeComponentId", "name", "sku", "category"],
          },
        ],
      });
      
      warrantyComponentsByModel[model.vehicleModelName] = warrantyComps;
      console.log(`  ‚úì ${model.vehicleModelName}: ${warrantyComps.length} components`);
    }

    console.log("");

    // ========================================
    // 3. ƒê·ªäNH NGHƒ®A XE KH√îNG C√ì CH·ª¶
    // ========================================
    // T·∫°o xe theo t·ª∑ l·ªá th·ª±c t·∫ø: ph·ªï bi·∫øn h∆°n ‚Üí nhi·ªÅu xe h∆°n
    const vehiclesWithoutOwnerData = [
      // === VF e34 (Ph·ªï bi·∫øn, gi√° r·∫ª) - 8 xe ===
      {
        model: "VF e34",
        vin: "VFE34STK2025000001",
        plate: null, // Ch∆∞a ƒëƒÉng k√Ω bi·ªÉn
        mfgDate: "2025-10-15",
        location: "Showroom H√† N·ªôi",
        color: "Tr·∫Øng Ng·ªçc Trai",
      },
      {
        model: "VF e34",
        vin: "VFE34STK2025000002",
        plate: null,
        mfgDate: "2025-10-18",
        location: "Showroom TP.HCM",
        color: "ƒê·ªè Ruby",
      },
      {
        model: "VF e34",
        vin: "VFE34STK2025000003",
        plate: null,
        mfgDate: "2025-10-20",
        location: "Kho H·∫£i Ph√≤ng",
        color: "Xanh Navy",
      },
      {
        model: "VF e34",
        vin: "VFE34STK2025000004",
        plate: null,
        mfgDate: "2025-10-22",
        location: "Showroom H√† N·ªôi",
        color: "ƒêen Tuy·ªÅn",
      },
      {
        model: "VF e34",
        vin: "VFE34STK2025000005",
        plate: null,
        mfgDate: "2025-10-23",
        location: "Showroom TP.HCM",
        color: "B·∫°c Titan",
      },
      {
        model: "VF e34",
        vin: "VFE34STK2025000006",
        plate: null,
        mfgDate: "2025-10-24",
        location: "Showroom ƒê√† N·∫µng",
        color: "Tr·∫Øng Ng·ªçc Trai",
      },
      {
        model: "VF e34",
        vin: "VFE34STK2025000007",
        plate: null,
        mfgDate: "2025-10-25",
        location: "Test Drive - H√† N·ªôi",
        color: "X√°m Titan",
      },
      {
        model: "VF e34",
        vin: "VFE34STK2025000008",
        plate: "TEST-001", // Xe test drive c√≥ bi·ªÉn t·∫°m
        mfgDate: "2025-09-01",
        location: "Test Drive - TP.HCM",
        color: "ƒê·ªè Ruby",
      },

      // === VF 5 Plus (Ph·ªï bi·∫øn, ph√¢n kh√∫c A) - 6 xe ===
      {
        model: "VF 5 Plus",
        vin: "VF5PSSTK2025000001",
        plate: null,
        mfgDate: "2025-10-10",
        location: "Showroom H√† N·ªôi",
        color: "Xanh D∆∞∆°ng",
      },
      {
        model: "VF 5 Plus",
        vin: "VF5PSSTK2025000002",
        plate: null,
        mfgDate: "2025-10-12",
        location: "Showroom TP.HCM",
        color: "V√†ng Chanh",
      },
      {
        model: "VF 5 Plus",
        vin: "VF5PSSTK2025000003",
        plate: null,
        mfgDate: "2025-10-16",
        location: "Kho H·∫£i Ph√≤ng",
        color: "Tr·∫Øng Ng·ªçc Trai",
      },
      {
        model: "VF 5 Plus",
        vin: "VF5PSSTK2025000004",
        plate: null,
        mfgDate: "2025-10-19",
        location: "Showroom C·∫ßn Th∆°",
        color: "ƒê·ªè Cherry",
      },
      {
        model: "VF 5 Plus",
        vin: "VF5PSSTK2025000005",
        plate: null,
        mfgDate: "2025-10-21",
        location: "Showroom H√† N·ªôi",
        color: "X√°m B·∫°c",
      },
      {
        model: "VF 5 Plus",
        vin: "VF5PSSTK2025000006",
        plate: "TEST-002",
        mfgDate: "2025-09-15",
        location: "Test Drive - ƒê√† N·∫µng",
        color: "Xanh D∆∞∆°ng",
      },

      // === VF 8 (Cao c·∫•p h∆°n) - 5 xe ===
      {
        model: "VF 8",
        vin: "VF8XSSTK2025000001",
        plate: null,
        mfgDate: "2025-10-05",
        location: "Showroom H√† N·ªôi Premium",
        color: "ƒêen Huy·ªÅn B√≠",
      },
      {
        model: "VF 8",
        vin: "VF8XSSTK2025000002",
        plate: null,
        mfgDate: "2025-10-08",
        location: "Showroom TP.HCM Premium",
        color: "Tr·∫Øng Ng·ªçc Trai",
      },
      {
        model: "VF 8",
        vin: "VF8XSSTK2025000003",
        plate: null,
        mfgDate: "2025-10-14",
        location: "Kho H·∫£i Ph√≤ng",
        color: "Xanh Navy",
      },
      {
        model: "VF 8",
        vin: "VF8XSSTK2025000004",
        plate: null,
        mfgDate: "2025-10-17",
        location: "Showroom H√† N·ªôi Premium",
        color: "B·∫°c Titan",
      },
      {
        model: "VF 8",
        vin: "VF8XSSTK2025000005",
        plate: "TEST-003",
        mfgDate: "2025-08-20",
        location: "Test Drive - TP.HCM",
        color: "ƒê·ªè R∆∞·ª£u Vang",
      },

      // === VF 9 (Cao c·∫•p nh·∫•t, √≠t h∆°n) - 3 xe ===
      {
        model: "VF 9",
        vin: "VF9XXSTK2025000001",
        plate: null,
        mfgDate: "2025-10-01",
        location: "Showroom H√† N·ªôi Flagship",
        color: "ƒêen Obsidian",
      },
      {
        model: "VF 9",
        vin: "VF9XXSTK2025000002",
        plate: null,
        mfgDate: "2025-10-11",
        location: "Showroom TP.HCM Flagship",
        color: "Tr·∫Øng Ng·ªçc Trai",
      },
      {
        model: "VF 9",
        vin: "VF9XXSTK2025000003",
        plate: "TEST-004",
        mfgDate: "2025-08-10",
        location: "Test Drive - H√† N·ªôi",
        color: "Xanh Petrol",
      },
    ];

    console.log(
      `üöô Chu·∫©n b·ªã t·∫°o ${vehiclesWithoutOwnerData.length} xe kh√¥ng c√≥ ch·ªß:\n`
    );
    console.log(`   - VF e34: 8 xe (ph·ªï bi·∫øn nh·∫•t)`);
    console.log(`   - VF 5 Plus: 6 xe (ph√¢n kh√∫c A)`);
    console.log(`   - VF 8: 5 xe (cao c·∫•p)`);
    console.log(`   - VF 9: 3 xe (flagship)\n`);

    // ========================================
    // 4. T·∫†O VEHICLES V√Ä COMPONENTS
    // ========================================
    const createdVehicles = [];
    let totalInstalledComponents = 0;

    for (const vehData of vehiclesWithoutOwnerData) {
      const model = modelsMap[vehData.model];
      
      if (!model) {
        console.warn(`‚ö†Ô∏è  Kh√¥ng t√¨m th·∫•y model ${vehData.model}, b·ªè qua...`);
        continue;
      }

      // T·∫°o vehicle
      const [vehicle, created] = await sequelize.models.Vehicle.findOrCreate({
        where: { vin: vehData.vin },
        defaults: {
          vin: vehData.vin,
          vehicleModelId: model.vehicleModelId,
          licensePlate: vehData.plate, // null ho·∫∑c bi·ªÉn test
          ownerId: null, // ‚Üê KH√îNG C√ì CH·ª¶
          purchaseDate: null, // ‚Üê CH∆ØA B√ÅN
          dateOfManufacture: new Date(vehData.mfgDate),
          placeOfManufacture: "Nh√† m√°y H·∫£i Ph√≤ng, Vi·ªát Nam",
        },
      });

      if (!created) {
        console.log(`  ‚è≠Ô∏è  VIN ${vehData.vin} ƒë√£ t·ªìn t·∫°i, b·ªè qua`);
        continue;
      }

      createdVehicles.push(vehicle);

      // L·∫•y danh s√°ch components theo WarrantyComponent
      const warrantyComps = warrantyComponentsByModel[vehData.model];
      let vehicleCompCount = 0;

      // T·∫°o components ƒë√£ l·∫Øp ƒë·∫∑t tr√™n xe
      for (const wc of warrantyComps) {
        const typeComp = wc.typeComponent;
        const quantity = wc.quantity || 1;

        for (let i = 1; i <= quantity; i++) {
          const serial = `${typeComp.sku}-STOCK-${vehData.vin}-${String(i).padStart(2, "0")}`;
          
          await sequelize.models.Component.findOrCreate({
            where: { serialNumber: serial },
            defaults: {
              typeComponentId: typeComp.typeComponentId,
              serialNumber: serial,
              status: "INSTALLED", // ƒê√£ l·∫Øp ƒë·∫∑t v√†o xe
              vehicleVin: vehicle.vin,
              installedAt: new Date(vehData.mfgDate), // L·∫Øp t·ª´ khi s·∫£n xu·∫•t
              warehouseId: null,
            },
          });

          vehicleCompCount++;
          totalInstalledComponents++;
        }
      }

      console.log(
        `  ‚úÖ ${vehData.model} - VIN: ${vehData.vin.slice(-6)} | ${vehicleCompCount} components | ${vehData.location}`
      );
    }

    // ========================================
    // 5. T√ìM T·∫ÆT
    // ========================================
    // ========================================
    // 5. C·∫¨P NH·∫¨T STOCK - ƒê·∫¢M B·∫¢O S·ªê L∆Ø·ª¢NG KH·ªöP V·ªöI TH·ª∞C T·∫æ
    // ========================================
    console.log("\nüì¶ Ki·ªÉm tra v√† c·∫≠p nh·∫≠t Stock...");

    // ƒê·∫øm s·ªë l∆∞·ª£ng components IN_WAREHOUSE cho m·ªói warehouse + typeComponent
    const stockCounts = {};
    
    const allComponentsInWarehouse = await sequelize.models.Component.findAll({
      where: { status: "IN_WAREHOUSE" },
      attributes: ["warehouseId", "typeComponentId"],
    });

    for (const comp of allComponentsInWarehouse) {
      const key = `${comp.warehouseId}_${comp.typeComponentId}`;
      stockCounts[key] = (stockCounts[key] || 0) + 1;
    }

    // C·∫≠p nh·∫≠t ho·∫∑c t·∫°o Stock entries
    let stockUpdated = 0;
    let stockCreated = 0;

    for (const [key, count] of Object.entries(stockCounts)) {
      const [warehouseId, typeComponentId] = key.split("_");

      const [stock, created] = await sequelize.models.Stock.findOrCreate({
        where: {
          warehouseId: warehouseId,
          typeComponentId: typeComponentId,
        },
        defaults: {
          warehouseId: warehouseId,
          typeComponentId: typeComponentId,
          quantityInStock: count,
          quantityReserved: 0,
        },
      });

      if (!created) {
        // C·∫≠p nh·∫≠t s·ªë l∆∞·ª£ng n·∫øu ƒë√£ t·ªìn t·∫°i
        await stock.update({ quantityInStock: count });
        stockUpdated++;
      } else {
        stockCreated++;
      }
    }

    console.log(`   ‚úì ƒê√£ t·∫°o ${stockCreated} Stock entries m·ªõi`);
    console.log(`   ‚úì ƒê√£ c·∫≠p nh·∫≠t ${stockUpdated} Stock entries`);
    console.log(`   ‚úì T·ªïng: ${Object.keys(stockCounts).length} Stock entries ƒë∆∞·ª£c ƒë·ªìng b·ªô`);

    // ========================================
    // 6. T√ìM T·∫ÆT
    // ========================================
    console.log("\n" + "=".repeat(80));
    console.log("üéâ HO√ÄN TH√ÄNH T·∫†O XE KH√îNG C√ì CH·ª¶!");
    console.log("=".repeat(80));
    console.log("\nüìä T√ìM T·∫ÆT:");
    console.log(`   üöó T·ªïng s·ªë xe t·∫°o m·ªõi: ${createdVehicles.length}`);
    console.log(`   ‚öôÔ∏è  T·ªïng components l·∫Øp ƒë·∫∑t: ${totalInstalledComponents}`);
    console.log(
      `   üìç Trung b√¨nh: ${Math.round(totalInstalledComponents / createdVehicles.length)} components/xe`
    );

    console.log("\nüìã PH√ÇN LO·∫†I:");
    const modelCounts = {};
    for (const v of createdVehicles) {
      const modelName = vehicleModels.find(
        (m) => m.vehicleModelId === v.vehicleModelId
      )?.vehicleModelName;
      modelCounts[modelName] = (modelCounts[modelName] || 0) + 1;
    }
    for (const [modelName, count] of Object.entries(modelCounts)) {
      console.log(`   - ${modelName}: ${count} xe`);
    }

    console.log("\nüí° ƒê·∫∂C ƒêI·ªÇM:");
    console.log("   ‚úì ownerId = NULL (ch∆∞a c√≥ ch·ªß)");
    console.log("   ‚úì purchaseDate = NULL (ch∆∞a b√°n)");
    console.log("   ‚úì dateOfManufacture = c√≥ gi√° tr·ªã (ƒë√£ s·∫£n xu·∫•t)");
    console.log("   ‚úì Components: status = 'INSTALLED'");
    console.log("   ‚úì Components l·∫Øp ƒë·∫∑t 100% theo WarrantyComponent c·ªßa model");
    console.log("   ‚úì Xe ph√¢n b·ªë ·ªü showroom, kho, v√† test drive");
    console.log("   ‚úì Stock.quantityInStock = S·ªê TH·ª∞C T·∫æ components IN_WAREHOUSE");

    console.log("\nüéØ S·ª¨ D·ª§NG:");
    console.log("   ‚Üí Xe trong showroom ƒë·ªÉ kh√°ch h√†ng xem");
    console.log("   ‚Üí Xe demo/test drive");
    console.log("   ‚Üí Xe ƒë√£ v·ªÅ kho ch·ªù b√°n");
    console.log("   ‚Üí C·∫≠p nh·∫≠t ownerId + purchaseDate khi c√≥ ng∆∞·ªùi mua");

    console.log("\n" + "=".repeat(80) + "\n");

    return {
      vehiclesCreated: createdVehicles.length,
      componentsInstalled: totalInstalledComponents,
      modelBreakdown: modelCounts,
      stockSynced: Object.keys(stockCounts).length,
    };
  } catch (error) {
    console.error("\n‚ùå L·ªñI:", error.message);
    console.error("Stack:", error.stack);
    throw error;
  }
}

// Ch·∫°y tr·ª±c ti·∫øp n·∫øu g·ªçi file n√†y
if (require.main === module) {
  seedVehiclesWithoutOwner()
    .then((result) => {
      console.log("‚ú® Seeding xe kh√¥ng c√≥ ch·ªß ho√†n t·∫•t!");
      console.log(`‚úÖ ƒê√£ t·∫°o ${result.vehiclesCreated} xe v·ªõi ${result.componentsInstalled} components`);
      process.exit(0);
    })
    .catch((error) => {
      console.error("‚ùå Seeding th·∫•t b·∫°i:", error.message);
      process.exit(1);
    });
}

module.exports = { seedVehiclesWithoutOwner };
